[General]
network = HoHuT
sim-time-limit = 10 min
repeat = 1
ned-path=/home/mnobrega/workspace/mixim/src;/home/mnobrega/workspace/mixim
tkenv-image-path=/home/mnobrega/workspace/mixim/images/hohut
load-libs=/home/mnobrega/workspace/mixim/src/modules/miximmodules /home/mnobrega/workspace/mixim/src/base/miximbase

**.coreDebug = false

## WORLD - ANNOTATIONS ##
*.annotations.draw = true
**.world.use2D = true
**.playgroundSizeX = 25 m
**.playgroundSizeY = 25 m
**.playgroundSizeZ = 0 m

## CONNECTION ##
**.connectionManager.sendDirect = false
**.connectionManager.pMax = 1.1mW
**.connectionManager.sat = -100dBm
**.connectionManager.alpha = 2.0
**.connectionManager.carrierFrequency = 2.4E+9Hz

## OBSTACLES ##
*.obstacles.debug = true

## NODES ##
#**.staticNode[*].netwType = "WiseRouteHoHuT"
***.netwType = "WiseRouteHoHuT"
***.net.headerLength = 24 bit
***.nic.phy.usePropagationDelay = false
***.nic.phy.sensitivity = -100dBm
***.nic.phy.maxTXPower = 1.1mW
***.nic.phy.useThermalNoise = true
***.nic.phy.analogueModels = xmldoc("xml_config_files/config.nic.phy.xml")
***.nic.phy.decider = xmldoc("xml_config_files/config.nic.phy.xml")
***.mobility.z = 0
**.staticNode[0].net.routeFloodsInterval = 1200 s ## este no reinicia a route tree a cada 1200 s
**.staticNode[0].net.sinkAddress = 1000 #this node starts the routing

[Config prodGeneralConfig]
**.numHostsStatic = 4
**.numHostsMobile = 1
**.staticNode[0].mobility.x = 6.25
**.staticNode[0].mobility.y = 6.25
**.staticNode[0].net.nodeNetwAddr = 1000
**.staticNode[1].mobility.x = 6.25
**.staticNode[1].mobility.y = 18.75
**.staticNode[1].net.nodeNetwAddr = 1001
**.staticNode[2].mobility.x = 18.75
**.staticNode[2].mobility.y = 6.25
**.staticNode[2].net.nodeNetwAddr = 1002
**.staticNode[3].mobility.x = 18.75
**.staticNode[3].mobility.y = 18.75
**.staticNode[3].net.nodeNetwAddr = 1003
**.mobileNode[0].mobility.x = 12.5
**.mobileNode[0].mobility.y = 12.5
**.mobileNode[0].net.nodeNetwAddr = 1

[Config testGeneralConfig1]
**.numHostsStatic = 1
**.numHostsMobile = 1
**.staticNode[0].mobility.x = 15.5
**.staticNode[0].mobility.y = 12
**.staticNode[0].net.nodeNetwAddr = 1000
**.staticNode[0].net.sinkAddress = 1000
**.mobileNode[0].mobility.x = 9.5
**.mobileNode[0].mobility.y = 12
**.mobileNode[0].net.nodeNetwAddr = 1

[Config testGeneralConfig2]
**.numHostsStatic = 4
**.numHostsMobile = 1
**.staticNode[0].mobility.x = 15.5
**.staticNode[0].mobility.y = 12
**.staticNode[0].net.nodeNetwAddr = 1000

**.staticNode[1].mobility.x = 15.5
**.staticNode[1].mobility.y = 14
**.staticNode[1].net.nodeNetwAddr = 1001
**.staticNode[2].mobility.x = 15.5
**.staticNode[2].mobility.y = 10
**.staticNode[2].net.nodeNetwAddr = 1002
**.staticNode[3].mobility.x = 15.5
**.staticNode[3].mobility.y = 8
**.staticNode[3].net.nodeNetwAddr = 1003
**.mobileNode[0].mobility.x = 9.5
**.mobileNode[0].mobility.y = 12
**.mobileNode[0].net.nodeNetwAddr = 1

#basic algorithim test
[Config test1]
extends = testGeneralConfig1
**.mobileNode[*].app.minimumStaticNodesForSample = 3

#basic algorithim with obstacles
[Config test2]
extends = testGeneralConfig1
**.mobileNode[*].app.minimumStaticNodesForSample = 3
*.obstacles.obstacles = xmldoc("xml_config_files/config.test.obstacles.xml")

#basic algorithim with obstacles and movement
[Config test3]
extends = testGeneralConfig1
**.mobileNode[*].app.minimumStaticNodesForSample = 3
*.obstacles.obstacles = xmldoc("xml_config_files/config.test.obstacles.xml")
**.mobileNode[0].mobilityType = "TurtleMobility"
**.mobileNode[0].mobility.updateInterval = 0.1 s
**.mobileNode[0].mobility.turtleScript = xmldoc("xml_config_files/config.test.mobility.obstacles.xml")

#basic calibration test
[Config test4]
extends = testGeneralConfig2
**.mobileNode[*].app.minimumStaticNodesForSample = 5
**.mobileNode[*].app.clusterKeySize = 1
*.obstacles.obstacles = xmldoc("xml_config_files/config.test.obstacles.xml")
**.mobileNode[0].app.calibrationMode = false
**.mobileNode[0].mobilityType = "TurtleMobility"
**.mobileNode[0].mobility.updateInterval = 0.1 s
**.mobileNode[0].mobility.turtleScript = xmldoc("xml_config_files/config.test.mobility.calibration.xml")
**.stats = false


## PRODUCTION - DATA-COLLECTION
# This allows one mobile node to collect the necessary tables to be loaded in each static node
[Config prodCalibration]
extends = prodGeneralConfig
**.mobileNode[*].app.calibrationMode = true
*.obstacles.obstacles = xmldoc("xml_config_files/config.prod.obstacles.xml")

# This is the config for the normal behavior of the WSN after all data-collection was completed
[Config prod]
extends = prodGeneralConfig
*.obstacles.obstacles = xmldoc("xml_config_files/config.prod.obstacles.xml")
