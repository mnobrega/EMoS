//
// Generated file, do not edit! Created by opp_msgc 4.2 from messages/NetwPkt.msg.
//

#ifndef _NETWPKT_M_H_
#define _NETWPKT_M_H_

#include <omnetpp.h>

// opp_msgc version check
#define MSGC_VERSION 0x0402
#if (MSGC_VERSION!=OMNETPP_VERSION)
#    error Version mismatch! Probably this file was generated by an earlier version of opp_msgc: 'make clean' should help.
#endif

// cplusplus {{
#include "SimpleAddress.h"
// }}



/**
 * Class generated from <tt>messages/NetwPkt.msg</tt> by opp_msgc.
 * <pre>
 * packet NetwPkt
 * {
 *     LAddress::L3Type destAddr;   
 *     LAddress::L3Type srcAddr;    
 *     int              ttl    = 1; 
 *     unsigned long    seqNum = 0; 
 * }
 * </pre>
 */
class NetwPkt : public ::cPacket
{
  protected:
    LAddress::L3Type destAddr_var;
    LAddress::L3Type srcAddr_var;
    int ttl_var;
    unsigned long seqNum_var;

  private:
    void copy(const NetwPkt& other);

  protected:
    // protected and unimplemented operator==(), to prevent accidental usage
    bool operator==(const NetwPkt&);

  public:
    NetwPkt(const char *name=NULL, int kind=0);
    NetwPkt(const NetwPkt& other);
    virtual ~NetwPkt();
    NetwPkt& operator=(const NetwPkt& other);
    virtual NetwPkt *dup() const {return new NetwPkt(*this);}
    virtual void parsimPack(cCommBuffer *b);
    virtual void parsimUnpack(cCommBuffer *b);

    // field getter/setter methods
    virtual LAddress::L3Type& getDestAddr();
    virtual const LAddress::L3Type& getDestAddr() const {return const_cast<NetwPkt*>(this)->getDestAddr();}
    virtual void setDestAddr(const LAddress::L3Type& destAddr);
    virtual LAddress::L3Type& getSrcAddr();
    virtual const LAddress::L3Type& getSrcAddr() const {return const_cast<NetwPkt*>(this)->getSrcAddr();}
    virtual void setSrcAddr(const LAddress::L3Type& srcAddr);
    virtual int getTtl() const;
    virtual void setTtl(int ttl);
    virtual unsigned long getSeqNum() const;
    virtual void setSeqNum(unsigned long seqNum);
};

inline void doPacking(cCommBuffer *b, NetwPkt& obj) {obj.parsimPack(b);}
inline void doUnpacking(cCommBuffer *b, NetwPkt& obj) {obj.parsimUnpack(b);}


#endif // _NETWPKT_M_H_
